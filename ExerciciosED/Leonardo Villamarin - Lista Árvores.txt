=============================================================
Exercício 1 

                       10
                      /  \
                     /    \
                    20     15
                   /  \   /  \
                  12   8 5    7
                 /  \
                1    2

a)10, 20, 12, 1, 2, 8, 15, 5, 7

b)1, 12, 2, 20, 8, 10, 5, 15, 7

c)1, 2, 12, 8, 20, 5, 7, 15, 10


=============================================================
Exercício 2

a)                    20
                     /  \
                    /    \
                   10     15
                  /  \   /  \
                 4    7 8    3
                / \
               1   2

| 20 | 10 | 15 | 4 | 7 | 8 | 3 | 1 | 2 |           

Remover elemento de maior prioridade (20)

1º passo
                       2
                     /  \
                    /    \
                   10     15
                  /  \   /  \
                 4    7 8    3
                / \
               1   20

| 2 | 10 | 15 | 4 | 7 | 8 | 3 | 1 | 20 |

2º passo
                      15
                     /  \
                    /    \
                   10     2
                  /  \   /  \
                 4    7 8    3
                / \
               1   20

| *15 | 10 | *2 | 4 | 7 | 8 | 3 | 1 | 20 |
                      
3º passo
                      15
                     /  \
                    /    \
                   10     8
                  /  \   /  \
                 4    7 2    3
                / \
               1   20

| *15 | 10 | *8 | 4 | 7 | *2 | 3 | 1 | 20 |

4º passo
                      15
                     /  \
                    /    \
                   10     8
                  /  \   /  \
                 4    7 2    3
                / 
               1  

| *15 | 10 | *8 | 4 | 7 | *2 | 3 | 1 | x |


-------------------------------------------------
b)                    20
                     /  \
                    /    \
                   10     15
                  /  \   /  \
                 4    7 8    3
                / \   
               1   2 

| 20 | 10 | 15 | 4 | 7 | 8 | 3 | 1 | 2 | 

Insere o elemento 16

1º passo
                      20
                     /  \
                    /    \
                   10     15
                 /   \   /  \
                4     7 8    3
               / \   /
              1   2 16

| 20 | 10 | 15 | 4 | 7 | 8 | 3 | 1 | 2 | 16 |              

2º passo
                      20
                     /  \
                    /    \
                   10     15
                 /   \   /  \
                4    16 8    3
               / \   /
              1   2 7

| 20 | 10 | 15 | 4 | *16 | 8 | 3 | 1 | 2 | *7 |

3º passo
                      20
                     /  \
                    /    \
                   16     15
                 /   \   /  \
                4    10 8    3
               / \   /
              1   2 7

| 20 | *16 | 15 | 4 | *10 | 8 | 3 | 1 | 2 | *7 |


=============================================================
Exercício 3

class Arvore
{
public:
No* raiz;
}

class No
{
public:
int valor;
No* esq;
No* dir;
}

a)int somarFolhas(No *a){
   if(a == NULL)
        return 0;
   else
   		return somarFolhas(a->esq) + a->valor, somarFolhas(a->dir) + a->valor;
} 

-------------------------------------------------
b)void posOrdem(No *a){
    if(a != NULL){
        posOrdem(a->esq);
        posOrdem(a->dir);
        printf("%d\n", a->valor);
    }
}

-------------------------------------------------
c)void emOrdem(No *a){
    if(a != NULL){
        emOrdem(a->esq);
        printf("%d\n", a->valor);
        emOrdem(a->dir);
    }
}

-------------------------------------------------
d)void preOrdem(No *a){
    if(a != NULL){
        printf("%d\n", a->valor);
        preOrdem(a->esq);
        preOrdem(a->dir);
    }
}

-------------------------------------------------
e)int altura(No *a) {
	int x, v;
    if (a == NULL) 
    	return -1;
    x = altura(a->esq);
    y = altura(a->dir);
    if (x > y) 
    	return x+1;
    else 
    	return y+1;
}

-------------------------------------------------
g)void percorre(No *a) { 
    if (a == NULL) 
    	return 0;
    printf("%d\n", a->valor); 
    percorre(a->esq);
    percorre(a->dir);
}

-------------------------------------------------
h)int produtoFolhas(No *a){
   if(a == NULL)
        return 0;
   else
   		return produtoFolhas(a->esq) * a->valor, produtoFolhas(a->dir) * a->valor;
} 

